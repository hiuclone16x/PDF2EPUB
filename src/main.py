import argparse
import os
import shutil
import tempfile
import sys
import logging

from pdf_processor import PDFProcessor
from html_converter import HTMLConverter
from epub_packager import EpubPackager
from image_optimizer import ImageOptimizer
from utils import parse_page_ranges
from layout_analyzer import LayoutAnalyzer
from toc_generator import TOCGenerator

def setup_logging():
    """C·∫•u h√¨nh h·ªá th·ªëng logging ƒë·ªÉ ghi ra file v√† console."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler("conversion.log"),
            logging.StreamHandler(sys.stdout)
        ]
    )

def main():
    """
    H√†m ch√≠nh ƒëi·ªÅu ph·ªëi to√†n b·ªô qu√° tr√¨nh chuy·ªÉn ƒë·ªïi t·ª´ PDF sang EPUB.
    """
    setup_logging()
    
    # 1. Thi·∫øt l·∫≠p v√† ph√¢n t√≠ch c√°c tham s·ªë d√≤ng l·ªánh
    parser = argparse.ArgumentParser(
        description="C√¥ng c·ª• d√≤ng l·ªánh ƒë·ªÉ chuy·ªÉn ƒë·ªïi file PDF sang ƒë·ªãnh d·∫°ng EPUB 3.0.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    # Chuy·ªÉn c√°c tham s·ªë b·∫Øt bu·ªôc th√†nh t√πy ch·ªçn ƒë·ªÉ c√≥ th·ªÉ nh·∫≠p sau
    parser.add_argument(
        "input_file",
        nargs='?',  # ƒê√°nh d·∫•u l√† c√≥ th·ªÉ c√≥ ho·∫∑c kh√¥ng
        default=None,
        help="ƒê∆∞·ªùng d·∫´n ƒë·∫øn file PDF ƒë·∫ßu v√†o (c√≥ th·ªÉ b·ªè tr·ªëng ƒë·ªÉ nh·∫≠p sau)."
    )
    parser.add_argument(
        "output_file",
        nargs='?',  # ƒê√°nh d·∫•u l√† c√≥ th·ªÉ c√≥ ho·∫∑c kh√¥ng
        default=None,
        help="ƒê∆∞·ªùng d·∫´n ƒë·ªÉ l∆∞u file EPUB ƒë·∫ßu ra (c√≥ th·ªÉ b·ªè tr·ªëng ƒë·ªÉ nh·∫≠p sau)."
    )
    
    args = parser.parse_args()

    # --- B·∫Øt ƒë·∫ßu lu·ªìng th·ª±c thi ---

    # ===== PH·∫¶N 1: L·∫§Y TH√îNG TIN T∆Ø∆†NG T√ÅC =====
    
    # L·∫•y v√† x√°c th·ª±c ƒë∆∞·ªùng d·∫´n file input
    input_path = args.input_file
    while not input_path or not os.path.isfile(input_path):
        if input_path:  # Tr∆∞·ªùng h·ª£p ng∆∞·ªùi d√πng cung c·∫•p ƒë∆∞·ªùng d·∫´n nh∆∞ng kh√¥ng h·ª£p l·ªá
            logging.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file t·∫°i '{input_path}'. Vui l√≤ng th·ª≠ l·∫°i.")
        
        try:
            input_path = input("‚û°Ô∏è  Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫øn file PDF: ").strip().replace('"', '')
        except KeyboardInterrupt:
            logging.info("\nƒê√£ h·ªßy b·ªüi ng∆∞·ªùi d√πng. T·∫°m bi·ªát!")
            sys.exit(0)
            
        if not input_path:
            logging.warning("ƒê∆∞·ªùng d·∫´n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")

    # L·∫•y v√† x√°c th·ª±c ƒë∆∞·ªùng d·∫´n file output
    output_path = args.output_file
    if not output_path:
        default_output = os.path.splitext(os.path.basename(input_path))[0] + '.epub'
        try:
            user_output = input(f"‚û°Ô∏è  Vui l√≤ng nh·∫≠p t√™n file EPUB output [M·∫∑c ƒë·ªãnh: {default_output}]: ").strip()
            if not user_output:
                user_output = default_output
        except KeyboardInterrupt:
            logging.info("\nƒê√£ h·ªßy b·ªüi ng∆∞·ªùi d√πng. T·∫°m bi·ªát!")
            sys.exit(0)
            
        output_path = user_output
    
    # L·∫•y c√°c t√πy ch·ªçn n√¢ng cao m·ªôt c√°ch t∆∞∆°ng t√°c
    try:
        logging.info("-" * 20)
        logging.info("C·∫•u h√¨nh t√πy ch·ªçn n√¢ng cao:")
        
        skip_pages_str = input("‚û°Ô∏è  Nh·∫≠p c√°c trang c·∫ßn b·ªè qua (vd: 1,3,5-7) [B·ªè tr·ªëng n·∫øu kh√¥ng c√≥]: ").strip()
        
        remove_keywords_str = input("‚û°Ô∏è  Nh·∫≠p c√°c t·ª´ kh√≥a c·∫ßn x√≥a, c√°ch nhau b·ªüi d·∫•u ph·∫©y (,) [B·ªè tr·ªëng n·∫øu kh√¥ng c√≥]: ").strip()
        remove_keywords = [k.strip() for k in remove_keywords_str.split(',') if k.strip()]

        # C·∫•u h√¨nh ph√¢n t√≠ch b·ªë c·ª•c
        layout_analyzer = None
        user_wants_layout_analysis = input("‚û°Ô∏è  B·∫°n c√≥ mu·ªën ph√¢n t√≠ch b·ªë c·ª•c (c·ªôt)? (y/n) [M·∫∑c ƒë·ªãnh: y]: ").strip().lower()
        if user_wants_layout_analysis in ('', 'y', 'yes'):
            logging.info("Ph√¢n t√≠ch b·ªë c·ª•c ƒë∆∞·ª£c B·∫¨T.")
            layout_analyzer = LayoutAnalyzer()
        else:
            logging.info("Ph√¢n t√≠ch b·ªë c·ª•c ƒë√£ ƒë∆∞·ª£c T·∫ÆT.")

        # C·∫•u h√¨nh t·∫°o m·ª•c l·ª•c t·ª± ƒë·ªông
        toc_generator = None
        user_wants_toc_generation = input("‚û°Ô∏è  B·∫°n c√≥ mu·ªën t·∫°o m·ª•c l·ª•c t·ª± ƒë·ªông? (y/n) [M·∫∑c ƒë·ªãnh: y]: ").strip().lower()
        if user_wants_toc_generation in ('', 'y', 'yes'):
            logging.info("T·∫°o m·ª•c l·ª•c t·ª± ƒë·ªông ƒë∆∞·ª£c B·∫¨T.")
            toc_generator = TOCGenerator()
        else:
            logging.info("T·∫°o m·ª•c l·ª•c t·ª± ƒë·ªông ƒë√£ ƒë∆∞·ª£c T·∫ÆT.")

        # C·∫•u h√¨nh t·ªëi ∆∞u h√≥a ·∫£nh
        optimizer = None
        user_wants_optimization = input("‚û°Ô∏è  B·∫°n c√≥ mu·ªën t·ªëi ∆∞u h√≥a h√¨nh ·∫£nh kh√¥ng? (y/n) [M·∫∑c ƒë·ªãnh: y]: ").strip().lower()
        if user_wants_optimization in ('', 'y', 'yes'):
            logging.info("T·ªëi ∆∞u h√≥a h√¨nh ·∫£nh ƒë∆∞·ª£c B·∫¨T.")
            try:
                quality_str = input("    - Ch·∫•t l∆∞·ª£ng ·∫£nh (1-100) [M·∫∑c ƒë·ªãnh: 85]: ").strip()
                quality = int(quality_str) if quality_str else 85
            except ValueError:
                logging.warning("Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng ch·∫•t l∆∞·ª£ng m·∫∑c ƒë·ªãnh l√† 85.")
                quality = 85

            try:
                width_str = input("    - Chi·ªÅu r·ªông t·ªëi ƒëa (pixels) [M·∫∑c ƒë·ªãnh: 1024]: ").strip()
                max_width = int(width_str) if width_str else 1024
            except ValueError:
                logging.warning("Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng chi·ªÅu r·ªông m·∫∑c ƒë·ªãnh l√† 1024.")
                max_width = 1024
            
            optimizer = ImageOptimizer(quality=quality, max_width=max_width)
        else:
            logging.info("T·ªëi ∆∞u h√≥a h√¨nh ·∫£nh ƒë√£ ƒë∆∞·ª£c T·∫ÆT.")

    except KeyboardInterrupt:
        logging.info("\nƒê√£ h·ªßy b·ªüi ng∆∞·ªùi d√πng. T·∫°m bi·ªát!")
        sys.exit(0)

    # ƒê·∫£m b·∫£o file output c√≥ ph·∫ßn m·ªü r·ªông .epub
    if not output_path.lower().endswith('.epub'):
        output_path += '.epub'

    temp_dir = tempfile.mkdtemp(prefix="pdf2epub_")
    logging.info(f"Th∆∞ m·ª•c l√†m vi·ªác t·∫°m th·ªùi: {temp_dir}")

    try:
        # 2. X·ª≠ l√Ω PDF
        logging.info("-" * 20)
        processor = PDFProcessor(pdf_path=input_path)
        all_pages_data = processor.extract_structured_content()

        # L·ªçc c√°c trang c·∫ßn b·ªè qua
        pages_to_skip = parse_page_ranges(skip_pages_str)
        pages_to_process = [page for page in all_pages_data if page['page_number'] not in pages_to_skip]
        if pages_to_skip:
            logging.info(f"ƒê√£ b·ªè qua c√°c trang: {sorted(list(pages_to_skip))}")

        # Ph√°t hi·ªán m·ª•c l·ª•c n·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu
        headings = []
        if toc_generator:
            logging.info("-" * 20)
            logging.info("B·∫Øt ƒë·∫ßu qu√° tr√¨nh ph√°t hi·ªán ti√™u ƒë·ªÅ ƒë·ªÉ t·∫°o m·ª•c l·ª•c...")
            headings = toc_generator.detect_headings(pages_to_process)
            logging.info(f"ƒê√£ ph√°t hi·ªán ƒë∆∞·ª£c {len(headings)} ti√™u ƒë·ªÅ.")

        # 3. Chuy·ªÉn ƒë·ªïi sang HTML
        logging.info("-" * 20)
        book_title = os.path.splitext(os.path.basename(input_path))[0]
        
        converter = HTMLConverter(
            book_title=book_title, 
            output_dir=temp_dir, 
            image_optimizer=optimizer,
            layout_analyzer=layout_analyzer
        )
        converter.create_stylesheet()
        
        html_files = []
        for page_data in pages_to_process:
            html_path = converter.create_html_from_page(
                page_data, 
                keywords_to_remove=remove_keywords
            )
            html_files.append(html_path)
        
        if remove_keywords:
            logging.info(f"ƒê√£ th·ª±c hi·ªán lo·∫°i b·ªè c√°c t·ª´ kh√≥a: {remove_keywords}")

        # 4. ƒê√≥ng g√≥i th√†nh EPUB
        logging.info("-" * 20)
        packager = EpubPackager(book_title=book_title)
        packager.create_epub(
            html_files=html_files,
            resource_dir=temp_dir,
            output_path=output_path,
            dynamic_toc=headings
        )

        processor.close()
        logging.info("-" * 20)
        logging.info("üéâ Qu√° tr√¨nh chuy·ªÉn ƒë·ªïi ƒë√£ ho√†n t·∫•t th√†nh c√¥ng! üéâ")

    except FileNotFoundError as e:
        logging.error(f"L·ªói: {e}")
        sys.exit(1)
    except Exception as e:
        logging.error(f"ƒê√£ x·∫£y ra m·ªôt l·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True)
        logging.error("Vui l√≤ng ki·ªÉm tra l·∫°i file PDF ƒë·∫ßu v√†o ho·∫∑c b√°o c√°o l·ªói.")
        sys.exit(1)
    finally:
        # 5. D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
            logging.info(f"ƒê√£ d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m th·ªùi: {temp_dir}")


if __name__ == "__main__":
    main() 