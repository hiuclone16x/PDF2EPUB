import argparse
import os
import shutil
import tempfile
import sys
import logging

from pdf_processor import PDFProcessor
from html_converter import HTMLConverter
from epub_packager import EpubPackager
from image_optimizer import ImageOptimizer
from utils import parse_page_ranges

def setup_logging():
    """C·∫•u h√¨nh h·ªá th·ªëng logging ƒë·ªÉ ghi ra file v√† console."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler("conversion.log"),
            logging.StreamHandler(sys.stdout)
        ]
    )

def main():
    """
    H√†m ch√≠nh ƒëi·ªÅu ph·ªëi to√†n b·ªô qu√° tr√¨nh chuy·ªÉn ƒë·ªïi t·ª´ PDF sang EPUB.
    """
    setup_logging()
    
    # 1. Thi·∫øt l·∫≠p v√† ph√¢n t√≠ch c√°c tham s·ªë d√≤ng l·ªánh
    parser = argparse.ArgumentParser(
        description="C√¥ng c·ª• d√≤ng l·ªánh ƒë·ªÉ chuy·ªÉn ƒë·ªïi file PDF sang ƒë·ªãnh d·∫°ng EPUB 3.0.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    # Tham s·ªë b·∫Øt bu·ªôc
    parser.add_argument("input_file", help="ƒê∆∞·ªùng d·∫´n ƒë·∫øn file PDF ƒë·∫ßu v√†o.")
    parser.add_argument("output_file", help="ƒê∆∞·ªùng d·∫´n ƒë·ªÉ l∆∞u file EPUB ƒë·∫ßu ra. Ph·∫ßn m·ªü r·ªông .epub s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông th√™m v√†o n·∫øu thi·∫øu.")
    
    # Tham s·ªë t√πy ch·ªçn Sprint 2
    parser.add_argument(
        "--skip-pages",
        type=str,
        default="",
        help='Chu·ªói c√°c trang c·∫ßn b·ªè qua. \nV√≠ d·ª•: "1,3,5-7" s·∫Ω b·ªè qua trang 1, 3, 5, 6, 7.'
    )
    parser.add_argument(
        "--remove-keywords",
        nargs='*',
        default=[],
        help='Danh s√°ch c√°c t·ª´ kh√≥a c·∫ßn lo·∫°i b·ªè kh·ªèi vƒÉn b·∫£n, ph√¢n t√°ch b·ªüi d·∫•u c√°ch. \nV√≠ d·ª•: --remove-keywords "B·∫£n quy·ªÅn" "Draft"'
    )
    parser.add_argument(
        "--image-quality",
        type=int,
        default=85,
        help="Ch·∫•t l∆∞·ª£ng h√¨nh ·∫£nh sau khi n√©n (1-100). M·∫∑c ƒë·ªãnh: 85."
    )
    parser.add_argument(
        "--image-max-width",
        type=int,
        default=1024,
        help="Chi·ªÅu r·ªông t·ªëi ƒëa cho h√¨nh ·∫£nh (pixels). M·∫∑c ƒë·ªãnh: 1024."
    )
    parser.add_argument(
        "--no-image-optimization",
        action="store_true",
        help="T·∫Øt ho√†n to√†n t√≠nh nƒÉng t·ªëi ∆∞u h√≥a h√¨nh ·∫£nh."
    )
    
    args = parser.parse_args()

    # --- B·∫Øt ƒë·∫ßu lu·ªìng th·ª±c thi ---
    if not args.output_file.lower().endswith('.epub'):
        args.output_file += '.epub'

    temp_dir = tempfile.mkdtemp(prefix="pdf2epub_")
    logging.info(f"Th∆∞ m·ª•c l√†m vi·ªác t·∫°m th·ªùi: {temp_dir}")

    try:
        # 2. X·ª≠ l√Ω PDF
        logging.info("-" * 20)
        processor = PDFProcessor(pdf_path=args.input_file)
        all_pages_data = processor.extract_content_by_page()

        # L·ªçc c√°c trang c·∫ßn b·ªè qua
        pages_to_skip = parse_page_ranges(args.skip_pages)
        pages_to_process = [page for page in all_pages_data if page['page_number'] not in pages_to_skip]
        if pages_to_skip:
            logging.info(f"ƒê√£ b·ªè qua c√°c trang: {sorted(list(pages_to_skip))}")

        # 3. Chuy·ªÉn ƒë·ªïi sang HTML
        logging.info("-" * 20)
        book_title = os.path.splitext(os.path.basename(args.input_file))[0]
        
        # Kh·ªüi t·∫°o optimizer n·∫øu ƒë∆∞·ª£c b·∫≠t
        optimizer = None
        if not args.no_image_optimization:
            optimizer = ImageOptimizer(quality=args.image_quality, max_width=args.image_max_width)
            logging.info(f"T·ªëi ∆∞u h√≥a h√¨nh ·∫£nh ƒë∆∞·ª£c B·∫¨T (ch·∫•t l∆∞·ª£ng: {args.image_quality}, r·ªông t·ªëi ƒëa: {args.image_max_width}px).")
        else:
            logging.info("T·ªëi ∆∞u h√≥a h√¨nh ·∫£nh ƒë√£ ƒë∆∞·ª£c T·∫ÆT.")

        converter = HTMLConverter(book_title=book_title, output_dir=temp_dir, image_optimizer=optimizer)
        converter.create_stylesheet()
        
        html_files = []
        for page_data in pages_to_process:
            html_path = converter.create_html_from_page(
                page_data, 
                keywords_to_remove=args.remove_keywords
            )
            html_files.append(html_path)
        
        if args.remove_keywords:
            logging.info(f"ƒê√£ th·ª±c hi·ªán lo·∫°i b·ªè c√°c t·ª´ kh√≥a: {args.remove_keywords}")

        # 4. ƒê√≥ng g√≥i th√†nh EPUB
        logging.info("-" * 20)
        packager = EpubPackager(book_title=book_title)
        packager.create_epub(
            html_files=html_files,
            resource_dir=temp_dir,
            output_path=args.output_file
        )

        processor.close()
        logging.info("-" * 20)
        logging.info("üéâ Qu√° tr√¨nh chuy·ªÉn ƒë·ªïi ƒë√£ ho√†n t·∫•t th√†nh c√¥ng! üéâ")

    except FileNotFoundError as e:
        logging.error(f"L·ªói: {e}")
        sys.exit(1)
    except Exception as e:
        logging.error(f"ƒê√£ x·∫£y ra m·ªôt l·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True)
        logging.error("Vui l√≤ng ki·ªÉm tra l·∫°i file PDF ƒë·∫ßu v√†o ho·∫∑c b√°o c√°o l·ªói.")
        sys.exit(1)
    finally:
        # 5. D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
            logging.info(f"ƒê√£ d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m th·ªùi: {temp_dir}")


if __name__ == "__main__":
    main() 